{"name": "MOCKAPI.IO automation testing", "status": "failed", "statusDetails": {"message": "AssertionError: was expecting 200 but got 404\nassert 404 == 200\n +  where 404 = <Response [404]>.status_code\n +  and   200 = int('200')", "trace": "data = {'endpoint': '/products/24', 'expected_status': '200', 'method': 'DELETE', 'payload': ''}, def_headers = {'content-type': 'application/json'}\n\n    @allure.title(\"MOCKAPI.IO automation testing\")\n    @allure.description(\"Testing REST API on MOCKAPI.IO(designer- SHARATH R BHAT)\")\n    @allure.severity(allure.severity_level.CRITICAL)\n    @pytest.mark.parametrize(\"data\",read_api_data())\n    @pytest.mark.smoke\n    def test_api(data,def_headers):\n        url=BASE_URL+data[\"endpoint\"] # url for method\n        method=data[\"method\"] #method\n        payload=json.loads(data[\"payload\"]) if data[\"payload\"] else {}  #payload with json.loads (to convert data in to string to dict)\n    \n        if method==\"GET\":\n            try:\n                res= requests.get(url,headers=def_headers)\n                print(f\"✅ Response:{res.json()}\")\n            except requests.exceptions.JSONDecodeError:\n                print(f\"❌ Exception caught:{res.text}\")\n    \n        elif method==\"DELETE\":\n            try:\n                res=requests.delete(url,headers=def_headers)\n                print(f\"✅ Response:{res.json()}\")\n            except requests.exceptions.JSONDecodeError:\n                print(f\"❌ Exception caught:{res.text}\")\n    \n        elif method ==\"POST\":\n            try:\n                res= requests.post(url,json=payload,headers=def_headers)\n                print(f\"✅ Response:{res.json()}\")\n            except requests.exceptions.JSONDecodeError:\n                print(f\"❌ Exception caught:{res.text}\")\n    \n        elif method ==\"PATCH\":\n            try:\n                res= requests.patch(url,json=payload,headers=def_headers)\n                print(f\"✅ Response:{res.json()}\")\n            except requests.exceptions.JSONDecodeError:\n                print(f\"❌ Exception caught:{res.text}\")\n    \n        elif method==\"HEAD\": #day-12: idempotent method check\n            try:\n                res= requests.head(url,headers=def_headers)\n                print(\"✅ NO RESPONSE REQUIRED!\")\n            except requests.exceptions.JSONDecodeError:\n                print(f\"❌ Exception caught:{res.text}\")\n        else:\n            pytest.skip(f\"WRONG METHOD! {method}\")\n    \n>       assert res.status_code == int(data[\"expected_status\"]), f\"was expecting {data['expected_status']} but got {res.status_code}\"\nE       AssertionError: was expecting 200 but got 404\nE       assert 404 == 200\nE        +  where 404 = <Response [404]>.status_code\nE        +  and   200 = int('200')\n\nTests\\test_backend.py:69: AssertionError"}, "description": "Testing REST API on MOCKAPI.IO(designer- SHARATH R BHAT)", "attachments": [{"name": "stdout", "source": "13f6bd7a-8cd4-4426-83ce-0e485b4e349a-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "data", "value": "{'method': 'DELETE', 'endpoint': '/products/24', 'payload': '', 'expected_status': '200'}"}], "start": 1753088767651, "stop": 1753088768351, "uuid": "45ebdc86-2cbc-4e76-a5c7-a5d2e7786d73", "historyId": "392005e8a8a0ffa3e8d8b10c0d6fdff0", "testCaseId": "5df9191b96d17fe15a12f0ace7c8a1e1", "fullName": "Tests.test_backend#test_api", "labels": [{"name": "severity", "value": "critical"}, {"name": "tag", "value": "smoke"}, {"name": "parentSuite", "value": "Tests"}, {"name": "suite", "value": "test_backend"}, {"name": "host", "value": "DESKTOP-Q9U7LBU"}, {"name": "thread", "value": "4864-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "Tests.test_backend"}]}