{"name": "test_crawl", "status": "broken", "statusDetails": {"message": "FileNotFoundError: [Errno 2] No such file or directory: 'failure_screenshot_25-07-04-08-55-45.png'", "trace": "setup = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"0dfbb347f36038323d7759534b42bc93\")>\n\n    @pytest.mark.smoke #smoke testing (added it in pytest.ini before)\n    def test_crawl(setup): #function inherits something from setup function above\n        driver=setup\n        driver.get(\"https://demoqa.com/modal-dialogs\")\n    \n    \n        try:\n>           WDW(driver,3).until(ec.element_to_be_clickable((By.ID,\"showLargeModal\"))).click()\n\ntest_check_1.py:29: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n..\\myvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:121: in click\n    self._execute(Command.CLICK_ELEMENT)\n..\\myvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:574: in _execute\n    return self._parent.execute(command, params)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n..\\myvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:447: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000002780362A310>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...ff68ed3c368+10728]\\\\n\\\\tBaseThreadInitThunk [0x0x7ffe7323259d+29]\\\\n\\\\tRtlUserThreadStart [0x0x7ffe7476af78+40]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <button id=\"showLargeModal\" type=\"button\" class=\"mt-2 btn btn-primary\">...</button> is not clickable at point (468, 573). Other element would receive the click: <iframe frameborder=\"0\" src=\"https://5c9d5506df686ec410ec936b3455f9d5.safeframe.googlesyndication.com/safeframe/1-0-45/html/container.html\" id=\"google_ads_iframe_/21849154601,22343295815/Ad.Plus-Anchor_0\" title=\"3rd party ad content\" name=\"\" scrolling=\"no\" marginwidth=\"0\" marginheight=\"0\" width=\"728\" height=\"90\" data-is-safeframe=\"true\" sandbox=\"allow-forms allow-popups allow-popups-to-escape-sandbox allow-same-origin allow-scripts allow-top-navigation-by-user-activation\" allow=\"private-state-token-redemption;attribution-reporting\" aria-label=\"Advertisement\" tabindex=\"0\" data-google-container-id=\"1\" style=\"border: 0px; vertical-align: bottom;\" data-load-complete=\"true\"></iframe>\nE         (Session info: chrome=137.0.7151.120)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x0x7ff68ed4cda5+78885]\nE       \tGetHandleVerifier [0x0x7ff68ed4ce00+78976]\nE       \t(No symbol) [0x0x7ff68eb09bca]\nE       \t(No symbol) [0x0x7ff68eb68779]\nE       \t(No symbol) [0x0x7ff68eb66112]\nE       \t(No symbol) [0x0x7ff68eb63151]\nE       \t(No symbol) [0x0x7ff68eb62041]\nE       \t(No symbol) [0x0x7ff68eb53654]\nE       \t(No symbol) [0x0x7ff68eb88b8a]\nE       \t(No symbol) [0x0x7ff68eb52f06]\nE       \t(No symbol) [0x0x7ff68eb88da0]\nE       \t(No symbol) [0x0x7ff68ebb122f]\nE       \t(No symbol) [0x0x7ff68eb88963]\nE       \t(No symbol) [0x0x7ff68eb516b1]\nE       \t(No symbol) [0x0x7ff68eb52443]\nE       \tGetHandleVerifier [0x0x7ff68f024eed+3061101]\nE       \tGetHandleVerifier [0x0x7ff68f01f33d+3037629]\nE       \tGetHandleVerifier [0x0x7ff68f03e592+3165202]\nE       \tGetHandleVerifier [0x0x7ff68ed6730e+186766]\nE       \tGetHandleVerifier [0x0x7ff68ed6eb3f+217535]\nE       \tGetHandleVerifier [0x0x7ff68ed559b4+114740]\nE       \tGetHandleVerifier [0x0x7ff68ed55b69+115177]\nE       \tGetHandleVerifier [0x0x7ff68ed3c368+10728]\nE       \tBaseThreadInitThunk [0x0x7ffe7323259d+29]\nE       \tRtlUserThreadStart [0x0x7ffe7476af78+40]\n\n..\\myvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:232: ElementClickInterceptedException\n\nDuring handling of the above exception, another exception occurred:\n\nsetup = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"0dfbb347f36038323d7759534b42bc93\")>\n\n    @pytest.mark.smoke #smoke testing (added it in pytest.ini before)\n    def test_crawl(setup): #function inherits something from setup function above\n        driver=setup\n        driver.get(\"https://demoqa.com/modal-dialogs\")\n    \n    \n        try:\n            WDW(driver,3).until(ec.element_to_be_clickable((By.ID,\"showLargeModal\"))).click()\n            time.sleep(10)\n            WDW(driver,5).until(ec.element_to_be_clickable((By.ID,\"closeLargeModal\"))).click()\n        except Exception as e:\n            print(\"exception caught!!:\",e)\n>           allure.attach.file(f\"failure_screenshot_{ts}.png\",name='Screenshots',attachment_type=allure.attachment_type.PNG)\n\ntest_check_1.py:34: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n..\\myvenv\\Lib\\site-packages\\allure_commons\\_allure.py:213: in file\n    plugin_manager.hook.attach_file(source=source, name=name, attachment_type=attachment_type, extension=extension)\n..\\myvenv\\Lib\\site-packages\\pluggy\\_hooks.py:512: in __call__\n    return self._hookexec(self.name, self._hookimpls.copy(), kwargs, firstresult)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n..\\myvenv\\Lib\\site-packages\\pluggy\\_manager.py:120: in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n..\\myvenv\\Lib\\site-packages\\allure_pytest\\listener.py:256: in attach_file\n    self.allure_logger.attach_file(uuid4(), source, name=name, attachment_type=attachment_type, extension=extension)\n..\\myvenv\\Lib\\site-packages\\allure_commons\\reporter.py:160: in attach_file\n    plugin_manager.hook.report_attached_file(source=source, file_name=file_name)\n..\\myvenv\\Lib\\site-packages\\pluggy\\_hooks.py:512: in __call__\n    return self._hookexec(self.name, self._hookimpls.copy(), kwargs, firstresult)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n..\\myvenv\\Lib\\site-packages\\pluggy\\_manager.py:120: in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n..\\myvenv\\Lib\\site-packages\\allure_commons\\logger.py:39: in report_attached_file\n    shutil.copy2(source, destination)\nC:\\Users\\sharath.R.Bhat\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\shutil.py:436: in copy2\n    copyfile(src, dst, follow_symlinks=follow_symlinks)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsrc = 'failure_screenshot_25-07-04-08-55-45.png'\ndst = WindowsPath('D:/test_journey/qa_allure_and_github/=allure-failure-results/e9d50f8c-fa5c-4ca2-9515-5bd86ad94d73-attachment.png')\n\n    def copyfile(src, dst, *, follow_symlinks=True):\n        \"\"\"Copy data from src to dst in the most efficient way possible.\n    \n        If follow_symlinks is not set and src is a symbolic link, a new\n        symlink will be created instead of copying the file it points to.\n    \n        \"\"\"\n        sys.audit(\"shutil.copyfile\", src, dst)\n    \n        if _samefile(src, dst):\n            raise SameFileError(\"{!r} and {!r} are the same file\".format(src, dst))\n    \n        file_size = 0\n        for i, fn in enumerate([src, dst]):\n            try:\n                st = _stat(fn)\n            except OSError:\n                # File most likely does not exist\n                pass\n            else:\n                # XXX What about other special files? (sockets, devices...)\n                if stat.S_ISFIFO(st.st_mode):\n                    fn = fn.path if isinstance(fn, os.DirEntry) else fn\n                    raise SpecialFileError(\"`%s` is a named pipe\" % fn)\n                if _WINDOWS and i == 0:\n                    file_size = st.st_size\n    \n        if not follow_symlinks and _islink(src):\n            os.symlink(os.readlink(src), dst)\n        else:\n>           with open(src, 'rb') as fsrc:\n                 ^^^^^^^^^^^^^^^\nE           FileNotFoundError: [Errno 2] No such file or directory: 'failure_screenshot_25-07-04-08-55-45.png'\n\nC:\\Users\\sharath.R.Bhat\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\shutil.py:256: FileNotFoundError"}, "attachments": [{"name": "Screenshots", "source": "e9d50f8c-fa5c-4ca2-9515-5bd86ad94d73-attachment.png", "type": "image/png"}, {"name": "stdout", "source": "f949a53f-7e57-4fa5-b870-46bf817cf05b-attachment.txt", "type": "text/plain"}], "start": 1751599547071, "stop": 1751599553031, "uuid": "655e5a74-1847-4eca-8268-2214a7741bc4", "historyId": "5c58b9fa5b2747c34be650f96f897bef", "testCaseId": "5c58b9fa5b2747c34be650f96f897bef", "fullName": "test_check_1#test_crawl", "labels": [{"name": "tag", "value": "smoke"}, {"name": "suite", "value": "test_check_1"}, {"name": "host", "value": "DESKTOP-Q9U7LBU"}, {"name": "thread", "value": "11988-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_check_1"}]}